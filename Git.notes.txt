@@@@@@@@@
DAY-9
@@@@@@@@@
	
Continuous :

Development 	--> IDE, GIT(VCS)
Integration	--> Jenkins, build tool 
Delivery		-->  Ansible, puppet 
Deployment	--> Docker, Ansible, Kubernetes
Testing		--> Selenium, JUnit
Monitoring	--> Promethus, Grafana, Datadog, Nagios

	Continuos Improvement! can be achieved Only thru Continuos Interaction!	

	Version Control System :
	
		What ?
		Why ?
		How ?
		
	Pre-req : Install GIT.
		in Window/Linux/Mac
	
	GIT Misc Commands!
	Init ---> Expert level!
	
	- What is Version Control System??? 
	- Source Code Management System.

	
	- Why VCS ???
		- To keep track of changes
		
	- How to use VCS?
		- Thru. GIT
		
	
	Use Case 1:
	
	- Developer1 --> 
		Web-Application :
			Java,jsp,html,css,angular
			Visual Studio Code ( IDE )

		loginpage.jsp 
		index.jsp 
		sign.jsp 
		
		Eg.: index.jsp 10lines
		
			<html>
			----
			-
			--
			-
			-
			-
			-
			-
			-
			-
			</html>
		
		tested this piece of code! 
		
		index.jsp 20+ lines
		
			<html>
			----
			-
			--adfasdfasdf
			-
			-adfasdfasdf
			-
			-
			-
			-
			-
			</html>
	
		
		index.jsp 30+ lines ---> 
		
			<html>
			----
			-
			--adfasdfasdf
			-
			-adfasdfasdf
			-adfadfasd
			-vdv
			-
			-
			-
			</html>
			
			
		Whenever I save the src code, it should be version controlled.
			- It helps to track the changes 
			- Quick go back / revert my changes 
		
		index.jsp ---- 10 lines --> saved -- v1.0
		index.jsp ---- 10 lines --> saved -- v1.1
		index.jsp ---- 10 lines --> saved -- v1.2	-- v1.2 
		index.jsp ---- 10 lines --> saved -- v1.3 -- Latest version

	Use Case 2:
		
		Multi user envi. developer 1 & Developer 2

			
		index.jsp ---- 10 lines --> saved -- v1.3 -- Latest version
		
		Common repostiory ( source code repository) 
		
		jdk 1.8
		jdk 11 jdk11.war 
		
		jdk 12   jdk12.war ---> release / tag / version

		jdk 11 
		
	Version Control @ source code level:
		source code level 
			index.jsp ---- 10 lines --> saved -- v1.0			build - artifacts v1.0.war
			index.jsp ---- 10 lines --> saved -- v1.1
			index.jsp ---- 10 lines --> saved -- v1.2	-- v1.2 
			index.jsp ---- 10 lines --> saved -- v1.3 -- Latest version
		
		artifact level  artifacts v1.0.war
			Artifactory Library / Repo.
				Azure Artifactory
				JFrog Artifactory
	
	
	Use Case 3: 
	
		Production Deployment : 
		
		deployment window/time frame --- 4-hours 
		v1.4
		index.jsp v1.5 --> thorough prod testing ---> if I find any issue?  
			-	first, try to fix that issue within that deployment window (4hours) -- Hotfix / adhoc 
			-   revert the changes!
			
			
	GIT :: Distributed VCS 

		Who are gng to use ??
		
		Developers.			programs 
		
		due to DevOps 
		
			Testing,
			DevOps Team,
			Infra-Team 
			Security team 
			
			can able to use GIT for maintaining and managing their Automation Scripts (shell, yaml, groovy, python)
		
			GITOps -->  
		
		
		
		
		index.jsp 
			-
			-
			-
			-
			-
			save ver1
			
		edit index.jsp 
			-
			-
			-
			-
			--
			
			save ver2
			
			
		
		VCS 
			Types of VCS 
				Local
				Central
				Distributed 				
				
		About GIT
			Features & Capabilities
		
		Features :
		
			GIT Workflow!
			GIT Branching Strategies!
			
		Parallel Development :
			
		index.jsp ===> 
		
		index.jsp ===> 
		
		GIT Workflow :::
		
			
	On-Prem servers/environments - Data Center!
	
		dev-servers,test,prod,
		dbase servers,
		git servers
		jenkin servers 
		Network servers like proxy servers 

	Cloud 
		IAAS	-> hardware 
		PAAS	-> hardware/OS 
		SAAS 	-> hardware/OS/Applications --> just Use. 
	
	Distributed VCS GIT :
	
		Local GIT Repo							(vs) 									Remote GIT Repo
	
									push the changes to remote repo 					Open-source / self-managed DVCS
																							GitHub
																							GitLab
																							Bitbucket 
																								
																						Cloud provided Managed DVCS
																							AWS : code commit
																							Az  : Azure Repository
																							GCP : Google Repos
																							

		GIT Workflow!

		Local Repo																		Remote Repo

		Workspace / working dir.
		project_folder				add this to git local repo 
			index.jsp 
	
																						
		Git Workflow Commands :
		
			git fork 			==> used to copy the complete remote repo at the remote level 
			git clone			==> copy the complete repo from remote to local machine(preferably do this for the first                                                                                                                       time) 
			git add 			==> add the changes from working dir to staging area
			git commit 	        ==> commits the changes from staging area to local repo.
			git push 			==> used to push the changes from local to remote repo.
			git fetch			==> used to check, if there is any incremental changes in remote repo and update the local                                                                                                                       repo it will never directly impact the working dir. Hence if needed, use git merge or                                                                                                                       checkout or pull to update working dir.			
			git pull			==> used to check, if there is any incremental changes in remote repo and directly update                                                                                                                       the changes in local repo and the working  dir.
			
			i.e., git pull ==> git fetch + git merge 
			
			git clone (vs) fork
			
		
			github-loksai-repo ==> forked and created git-hub-samplerepo1 ==> clone to local --> make change --> add, commit -->                                                                                                push  
			
			git clone 		-- copy the remote repo to local repo. 
				
			git fork 		-- used to create the backup of remote repositories.

		
		Installation of GIT ::::
			
			Windows :::			
				git bash
				git gui 
				
			ubuntu
				apt-get install git -y
				
		
		git Bash :::

		Open Git Bash 
		
			cd d:
				mkdir staragile
				cd staragile
					mkdir project1
					cd project1
			
			
			
		Working directory / project folder							Staging Area					Local Repo 
			
			file1.txt 												file1.txt
			
		
		git init 	- 	is used to initialize the local repo.
		                                     creates default branch called 'master'
		git status	-	used to get the current status of the git repository 
		
		git add file1.txt
		
		git commit -m "CR#1111 changes made for file1.txt"
		
		Track the changes ???
				
				Which file has been changed, 
				What changes ?
				Who made the changes ?
				When the changes are made? 
	
		Configure GIT User Name and Email_ID
			
		git config user.email "adfadf@gmail.com"
		git config --global user.email "adfadf@gmail.com"

	
	Summary :::
		
		VCS & Types 
		Git Installation
		Git workflow
		git basic commands to work in local repo
		
@@@@@@@@@@
DAY-10
@@@@@@@@@@

	Misc GIT Commands:
	
	git log 
	
	git diff 
	
	git rm --cached <file1.txt> 
	
	git rm -f <file.txt>
	
	**** git revert  & reset !!!!
	
	- git-ignore!
	
		
	web_appln_project 				--> git init 	--> git push -- and pushed to remote repo. 
		index.jsp
		sign.java
		payment.java
		
		s1.class
		s1.war
		
		readme.txt
		req.doc 
		
		secrets.json
		dbcredentials.json 
		
	vi .gitignore 
		
		s1.class
		s1.war
		
		readme.txt
		req.doc 
		
		secrets.json
		dbcredentials.json 		
		
	Best Practise :: Always .gitignore file should be added and it shd be the very first commit.
	
	
	folder 
	
	web_appln_project 				--> git init 	--> git push -- and pushed to remote repo. 

	git init
	
		index.jsp
		sign.java
		payment.java
		
		s1.class
		s1.war
		
		readme.txt
		req.doc 
		
		secrets.json
		dbcredentials.json 
	
	git add .
	
	git commit -----
	
	vi .gitignore 
		s1.class
		s1.war		
		readme.txt
		req.doc 
		secrets.json
		dbcredentials.json 
		dbsecrets.json
	
	
	git commit -- 
	
	echo "adfasd" >> req.doc 
	
	1 -- 1000 
	
	dbsecrets.json
	
	vi .gitignore 
	dbsecrets.json
	
	echo "dbsecrets.json" > .gitignore
	
	
	---> 
	
	There are 3 types of files in git perspective 
	
		- Untracked File 
		
		- Tracked File 
		
		- Ignored File
		
	
	
	Best Practise :: Always .gitignore file should be added and it shd be the very first commit.
	
	DevOps_release_automation_project:									===> after git_push -- this can be accessible by anyone in portfolio
	
		*.py
		*.tf
		ansible/*.yaml
		*.groovy 
		*.yaml	

		dev1.config 				### I never maintain like this 
		dev2.config 				### I never maintain like this
 		
		config/
			dev1.config 					 
			dev2.config 				
			dev.config
			qa.config
			uat.config
			prod.config 
		secrets/
			dev.secrets
			qa.secrets
			uat.secrets
			prod.secrets 
		
		vi .gitignore 
		
			config/
			secrets/
	
	GIT Repo Orgn. ---> created for one protfolio 
	
		DevOps Team 
		
	ORgn --> DevOps & AD Team Lead & Release Team Leads & Testing Team Leads
		
	
	
	GIT Reset !
	
		head, add, commit 
		
		Working Dir, Staging, Local Repo 
	
	
	git reset --soft 	
		--> It just move the HEAD pointer to previous commit point. Changes will be retained in staging area and Working dir. 
		- 
	git reset --mixed
		--> It just move the HEAD pointer to previous commit point. Changes will be removed from staging area. but, retained in Working dir.                                           Is default.
		
	git reset --hard 
		--> It move the HEAD pointer to previous commit point. Changes will be completely removed from staging area and Working dir.
        -->  risky one. It is NOT recommended. 
	
	
	git reset will just reset to previous commit. It will never create new commit point. 
	
	
	GIT REVERT 
	
		git revert <commit_id>
		
		git revert will create new commit point. 
		
	                   reset & revert!!!
		
		prod deployment ::: 
	
	Application ::::
	
		deployed one appln --> creating some reports - Daily Report  in a flat file1,2,3
		
		reset --hard 
		
		stored in a temp repository ---> read that file from this temp repo and process it.
		
		then, the formated file will be permanently stored in a actual repo. 
		
		Repository 
		
		Daily I need add new processed file to actual repo. -- version controlled. 
		file 1,2,3,4,5 -- HEAD
	
		git reset 2
		
		git revert 
		
		branch --- 
		
	Commit Message 	--> should follow certain standards
					PROD_ID 
					CR_Number 
					
		git commit --amend -m "Actual Commit Message"
		

@@@@@@@@@
DAY-11
@@@@@@@@@

		subversion!
		
			VCS 
				LVCS	
				CVCS	google drive / docs /excel sharepoint - team -- subversion - CVCS 
				DVCS 	github

VMS - install subversion tool

dev1  java progm 
dev2 
dev3 
commit -- versions 

		GIT Branching Strategies!
		
		git init ???
		
		master branch is the default branch 
		
		main branch 
		
		prod 
		
		git init --> 

		What is Branch ?
		
		Why we need Branch ?

		VCS ===> DVCS ---> Enable Parallel Development!


	folder/dir
	master branch:
		index.jsp program!
		
			function : signin, signup, 

	feature-dev1
		index.jsp program!

	feature-dev2
		index.jsp program!

		dev1 - signin
		dev2 - signup 
		
	GIT Branching Strategies :::
	
	
	master 																	master as prod copy 
		index.jsp (10 lines) 1MB
	
		feature1	index.jsp (10 lines)																						
				index.jsp -- all the increment changes are done in feature branch. 
		feature2
				index.jsp -- all the increment changes are done in feature branch.
		feature3
				index.jsp -- all the increment changes are done in feature branch.
		feature4
				index.jsp -- all the increment changes are done in feature branch.
		feature5
				index.jsp -- all the increment changes are done in feature branch.
		feature6
				index.jsp -- all the increment changes are done in feature branch.

Repository : 2MB

	master 																	master as prod copy 
		index.jsp (10 lines) 1MB
		
			feature1  ---> index.jsp (10 lines)	    	- size is 0 
							+++10 record ++1MB			- it is still 1 MB
							
			feature2  ---> index.jsp (10 lines) 1MB	  	- size is 0
							+++5 record ++.5MB			-	size is .5MB
			
			feature3  ---> index.jsp (10 lines) 1MB	  	- size is 0
							+++5 record ++.5MB			-	size is .5MB
			
	if we merge feature1 to master :
	
	master 
		index.jsp (20 lines) 2MB
	
			feature1 ----> index.jsp (20 lines)			- size is 0


Single user1
		
		Local git install 
	
	master 																	master as prod copy 
		index.jsp 5MB
	
		feature1	index.jsp 																						
				index.jsp -- all the increment changes are done in feature branch. 
		feature2
				index.jsp -- all the increment changes are done in feature branch.
		feature3
				index.jsp -- all the increment changes are done in feature branch.
		feature4
				index.jsp -- all the increment changes are done in feature branch.
		feature5
				index.jsp -- all the increment changes are done in feature branch.
		feature6
				index.jsp -- all the increment changes are done in feature branch.
	
	
************************************************************************************************
	
GIT Branching Strategy / Policy / Process 
	
	master  ===> 
	
	Bugfix/Hotfix_Branch / Adhoc_Branch   ===> Make the necessary code changes and test it. 
	
		Release_Branch
		
			Integration_Branch1   	--> App.Team1
			
				Dev_branch1			--> developer1 
					feature1
					feature2
					feature3
					feature4			
				Dev_branch2			--> developer2 
					feature1
					feature2
					feature3
					feature4
					feature5
		
			Integration_Branch2		--> App.Team2
			
				Dev_branch1			--> developer1 
					feature1
			
				Dev_branch2			--> developer2 
					CR1002
					CR1001


	New_Project			 
	Bug_Fixing 
	CR-Change Request	---> CR_Number

DEMO :
	
	Basic command to work on GIT Branches!


	master
		
		f1
		
		f2
		
		f3
		
		f4 

		git branch  -- list branch
		
		git branch f1 -- create branch

		git switch -c f1 -- create branch and switch

		git checkout -b f1 -- create branch and switch
		
		git switch/checkout f1 -- just to switch to existing branch 
		
		git merge 
		
		
		master -- file1.txt					 2rec ==> 4rec ==> 
		
			f1 --> update file1.txt	 with 2rec 		+2rec 	
			
			f2 --> update file1.txt	 with 2rec		+2rec 
		
master		
		zzzz
		aaaa
		
master	(f1)		(f2)
		zzzz		zzzz	
		aaaa		aaaa
		vvvv		qqqq
		cccc		wwww

		
f1		
		zzzz
		aaaa
		vvvv
		cccc

f2 
		zzzz
		aaaa
		qqqq
		wwww
		
		
	once f1 merges to master 
	
		zzzz
		aaaa
		vvvv
		cccc		
		
	when f2 merges to master 	

		zzzz
		aaaa		
		vvvv
		cccc		
		qqqq
		wwww				
	
	Create Merge Confict
	
			- When the same file is updated by more than users in the same lines, we get merge conflict.
		
	How to fix Merge Conflict ?
	
		- Identify the file(s) which is causing the conflict.
		
		- Discuss with the team who made the changes, review and finalize the changes to be merged into target branch 
		
		- Update the file 
		
		- Add and Commit the changes.

	master
		Dev_branch1
			feature1
			feature2
			
	To Prevent Merge Conflict :
	
		- Review the chanages before Merge.
		
		- Always pull/fetch the changes into the current branch before merging to target branch 
	
	
		
master		
		zzzz
		aaaa
		
f1		
		zzzz
		aaaa
		vvvv   
		cccc

	git merge f1 

master		
		zzzz
		aaaa
		vvvv
		cccc	
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`

f2 
		zzzz
		aaaa
		qqqq
		wwww		
		
	Always pull/fetch the changes into the current branch before merging to target branch
	
f2 		
		zzzz
		aaaa
		vvvv
		cccc
		qqqq
		wwww

	git merge f2
	
		Before merge, just do fetch/pull/rebase
		


	master : cm1,cm2
	
		feature1 : cm1,cm2,cm1-f1,cm2-f1 
		
		git merge feature1 :: 
		
			master : cm1,cm2,cm1-f1,cm2-f1 

		feature2 : cm1,cm2,cm1-f2,cm2-f2
		
		
		git rebase master 
		
			feaure2 : cm1,cm2,cm1-f1,cm2-f1,cm1-f2,cm2-f2

		git merge feature2 ::
	
			master : 
			
			
	
	master : cm1,cm2 
	
		f1: cm1,cm2 
		f2: cm1,cm2
		
		f2 : 			cm1,cm2,cm1f2
		
		
		f1 :		    cm1,cm2,cm1f1 
		
				   
		merged f2 to master :: cm1,cm2,cm1f2


		merge f1 to master  :: expected linear ::: cm1,cm2,cm1f2,cm1f1 
		
		rebase :: 
		
		
		ORT merge :: cm1,cm2,cm1f1,cm1f2




		
		merge to master ::: cm1,cm2,cm1f1,cm2f1
		
		f2: cm1,cm2,cm1f2,cm2f2
	
				   ,cm1f2,cm2f2	
	
		merge to master ::: cm1,cm2,cm1f2,cm2f2,cm1f1,cm2f1
	
	rebase :: 
	
	git rebase master 
		f2: cm1,cm2,cm1f1,cm2f1,cm1f2,cm2f2
	
	
	Rebase ::: is one of the best practises to keep your current branch in-sync with your target branch.
	
	
	Local Repo 								 		Remote Repo 
	
	rebase 											fetch/pull
	
	
	Summary :
	
		Rebase :
		
			- Is one of the best practises to keep your current branch in-sync with your target branch.
			
			- Always issue rebase command before you merge the changes into target branch

		Fetch/Pull :

			- Is one of the best practises to keep your local Repo branch in-sync with your remote branch.
			
			- Always issue fetch/pull command before you push the changes into remote repo.


	SQUASH :
	
	
		master : ---> cm1,cm2,cm3,cm1f1,cm2f1,cm3f1,...........,cm100f1,cm1f2,cm2f2,cm3f2,...........,cm100f2
		
				feature1	--> cm1f1,cm2f1,cm3f1,...........,cm100f1 --> merge 
				
				feature2	--> cm1f2,cm2f2,cm3f2,...........,cm100f2 --> merge
				
				feature3	--> cm1f3,cm2f3,cm3f3
	
		Squash :::: Combine all the commits and create a new commit point and merge into the target.
	
		Squash :::::::
		
			Before Merge. i.e., while you are working in the current branch
				git rebase -i HEAD~10
			
			While Merging :			
				git merge --squash feature1
				git commit -m "Combined commits from feature1"
				
				
		index.html 
		
		<html>
			-----
			----
			---
			-
			-<>
			func1() -- 10 commits 
			-
			-			
			-
		</html>	
	
	
	
	
	master  ===> release version v1.0(Tags)						Tag / Release_ID
	
	Bugfix/Hotfix_Branch / Adhoc_Branch   ===> Make the necessary code changes and test it. 
	
		Release_Branch											git merge --squash Integration_Branch1
		
			Integration_Branch1   	--> App.Team1				git merge --squash Dev_branch1
			
				Dev_branch1			--> developer1  			git merge feature1,2,3,4
					feature1   cm1.................100
					feature2 
					feature3
					feature4			
				Dev_branch2			--> developer2 				git merge feature1,2,3,4					version/tag
					feature1
					feature2
					feature3
					feature4
					feature5
		
			Integration_Branch2		--> App.Team2
			
				Dev_branch1			--> developer1 
					feature1
			
				Dev_branch2			--> developer2 
					CR1002
					CR1001	
	
	
	Cherry pick  ::::
	
	master  ===> release version v1.0(Tags)
	
	Bugfix/Hotfix_Branch / Adhoc_Branch   ===> Make the necessary code changes and test it. 
	
		Release_Branch				---> 	git cherry-pick db1_cmID								
											git merge Integration_Branch1
											
			Integration_Branch1   	--> App.Team1		--> db1_cmID,db2_cmID				
			
				Dev_branch1			--> developer1  			git merge feature1,2,3,4
					feature1   cm1.................100
					feature2 
					feature3
					feature4			
				Dev_branch2			--> developer2 				git merge feature1,2,3,4
					feature1
					feature2
					feature3
					feature4
					feature5
	
	echo "rec" >> f1.txt
	echo "rec" >> f1.txt
	echo "rec" >> f1.txt
	
		git add .
		
	echo "rec" >> f1.txt
	echo "rec" >> f1.txt
	echo "rec" >> f1.txt
	echo "rec" >> f1.txt

		git add .
		
	git commit -m "asdfa" 

@@@@@@@@
DAY-12
@@@@@@@@

	Demo : git merge,rebase,squash,cherry-pick

	Git Stash :::
				
		dev1 --> Working on a CR1.

	repo1:
		master 
			feature-CR1 	---> index.html -- func1,func2,func3,..... --> added index 
			
			feature-Adhoc 	---> jjjj 10... 
			
		index.jsp  -- <Html> ------> func1,func2,func3,func4,func5


	###Remote Repository :::
	
		GITHUB :::
		
		Local Repo 			--->          Remote Repo.
		
		
		
		
	New_Project	
	
	Bug_Fixing
	
	CR-Change Request	---> CR_Number
		
		
	How to start creating a new repo in github and push the changes from the local repo.
		
	How to clone/pull the changes from remote repo., make some changes in local and push the changes back to remote repo.
		
		
		
	First :
	
		How to clone the repo!
		Understand the Remote Repo. UI.
		
		
		
		jdk 1.7 		release 
		jdk 1.8
		
		
		
		
		Prod version 		-- jdk1.9			 Release -- used by the End-users ---> if is a stable version 
		
		beta version 		-- jdk1.10.beta			Business Users 
		unstable ver.
		
	
	Remote Repositories	:::
	
		Local & Remote Repo	
	
	New_Project	
				
				git 
					init 
					add
					commit 
					
				git remote add <remote_Repo_Name>
				git remote -v 			used to list the remote repositories that are connect to the local repo.
				git remote remove 
								
					git remote add origin1 https://github.com/LoksaiETA/dummyremoterepo2.git	




		git fetch		==>  	just chk for the incremental changes in remote repo, update the changes in local repo
			
		git pull 		==> 	chk for the incremental changes in remote repo, update the changes in local repo and working directory 
							
		git push 		==> 	push the changes from local to remote repo 


		
	Bug_Fixing	
	CR-Change Request	---> CR_Number	
	

		git clone 
	
		git fetch		==>  	just chk for the incremental changes in remote repo, update the changes in local repo
								
		git pull 		==> 	chk for the incremental changes in remote repo, update the changes in local repo and working directory 
								===> fetch + merge 
								
		git push 		==> 	push the changes from local to remote repo 	
	
		git remote -v 			used to list the remote repositories that are connect to the local repo.
		
		git remote remove 	






	
  453  cd d:
  454  mkdir staragile
  455  cd staragile/
  456  ls
  457  clear
  458  pwd
  459  mkdir project1
  460  cd project1/
  461  pwd
  462  cd ..
  463  mkdir project2
  464  ls
  465  cd project1
  466  ls
  467  clear
  468  pwd
  469  git init
  470  ls
  471  ls -a
  472  cd .git
  473  ls
  474  cd ..
  475  git branch
  476  clear
  477  echo "rec1" >> file1.txt
  478  ls
  479  cat file1.txt
  480  git status
  481  git add file1.txt
  482  git status
  483  git commit -m "Commit Message"
  484  git log
  485  git config --global -edit
  486  clear
  487  ls
  488  git log
  489  git config user.email "adfadf@gmail.com"
  490  echo "rec1" >> file2.txt
  491  git add file2.txt
  492  git status
  493  git commit -m "CM2"
  494  git log
  495  clera
  496  clear
  497  git config
  498  git config --list
  499  git config --list --global
  500  clear
  501  cd d:
  502  cd staragile/
  503  ls
  504  clear
  505  ls
  506  ls
  507  clear
  508  ls
  509  cd project
  510  cd project1
  511  ls
  512  ls -a
  513  cd .git/
  514  ls
  515  cd config
  516  at config
  517  cat config
  518  ls
  519  cd ..
  520  clear
  521  cd ..
  522  cd project
  523  cd project2/
  524  ls
  525  clear
  526  ls -a
  527  clear
  528  git init
  529  echo "record1" >> file1.txt
  530  git status
  531  git add file1.txt
  532  git commit -m "CM1"
  533  git status
  534  clear
  535  echo "rec1" >> file2.txt
  536  echot "rec1" >> file3.txt
  537  echo "rec1" >> file3.txt
  538  ls
  539  clear
  540  ls
  541  git status
  542  git add file2.txt
  543  git status
  544  git add file3.txt
  545  git status
  546  git commit -m "CM2"
  547  git log
  548  clera
  549  cear
  550  clear
  551  git log
  552  echo "rec2" >> file1.txt
  553  git add .
  554  git commit -m "CM3"
  555  clear
  556  git log
  557  echo "rec1" >> f1.md
  558  git add .
  559  git commit -m "CM4"
  560  clear
  561  ls
  562  ls *.md
  563  clear
  564  ls
  565  ls
  566  ls *.txt
  567  clear
  568  git log
  569  clear
  570  git log --oneline
  571  git log
  572  clear
  573  git log --stat
  574  git log --oneline
  575  git log -3
  576  git log -2
  577  git log --oneline -3
  578  git log --stat -2
  579  git log --stat
  580  clear
  581  ls
  582  cat file1.txt
  583  git status
  584  echo "rec3" >> file1.txt
  585  git status
  586  git diff
  587  git add .
  588  git diff
  589  git diff --staged
  590  git commit -m "CM5"
  591  git diff --staged
  592  git diff HEAD
  593  ls
  594  cat file1.txt
  595  git log --oneline
  596  git diff a5543c9 4e758fe
  597  git diff 4e758fe a5543c9
  598  git diff branch1 branch2
  599  clear
  600  git status
  601  echo "rec1" >> q1.txt
  602  git status
  603  git add .
  604  git status
  605  git rm --cached q1.txt
  606  git status
  607  git add .
  608  git add .
  609  git rm -f --cached q1.txt
  610  ls
  611  git clear
  612  clear
  613  git status
  614  git status
  615  git add .
  616  clear
  617  git status
  618  git log --oneline
  619  git commit -m "CM6"
  620  clear
  621  git status
  622  ls
  623  echo "rec1" >> a1.txt
  624  git add .
  625  clear
  626  ls
  627  git status
  628  git rm --cached a1.txt
  629  ls
  630  git status
  631  git add .
  632  clear
  633  git status
  634  ls
  635  git rm -f a1.txt
  636  ls
  637  git status
  638  clear
  639  clear
  640  git status
  641  git log --oneline
  642  clear
  643  clear
  644  cd ..
  645  mkdir project3
  646  cd project3/
  647  clear
  648  git status
  649  git init
  650  git status
  651  clear
  652  vi .gitignore
  653  cat .gitignore
  654  git status
  655  git add .
  656  git commit -m "Initial Commit with .gitignore file"
  657  git log
  658  clear
  659  cat .gitignore
  660  echo "rec1" >> f1.txt
  661  echo "rec1" >> q1.doc
  662  git status
  663  ls
  664  echo "rec1" >> xxxx.md
  665  git status
  666  echo "rec1" >> s1.class
  667  git status
  668  ls
  669  clear
  670  ls
  671  ls -a
  672  cat .gitignore
  673  clear
  674  git log
  675  clear
  676  git status
  677  git add .
  678  git commit -m " blablabla"
  679  clear
  680  git status
  681  cd ..
  682  mkdir project4
  683  cd project4
  684  clear
  685  ls
  686  git init
  687  echo "rec1" >> f1.txt
  688  git add .
  689  git commit -m "CM1"
  690  clear
  691  git status
  692  ls
  693  git log --oneline
  694  echo "rec1" >> f2.txt
  695  git add .
  696  git commit -m "CM2"
  697  echo "rec1" >> f3.txt
  698  git add .
  699  git commit -m "CM3"
  700  echo "rec1" >> f4.txt
  701  git add .
  702  git commit -m "CM4"
  703  echo "rec1" >> f5.txt
  704  git add .
  705  git commit -m "CM5"
  706  clear
  707  git log --oneline
  708  ls
  709  git status
  710  clear
  711  ls
  712  git ls-files
  713  git log --oneline
  714  git reset --soft 31300a8
  715  git status
  716  git ls-files
  717  ls
  718  git log --oneline
  719  git commit -m "CM5"
  720  git log --oneline
  721  git ls-files
  722  ls
  723  git status
  724  clear
  725  git log --oneline
  726  git ls-files
  727  ls
  728  git reset --mixed 31300a8
  729  git ls-files
  730  ls
  731  git log --oneline
  732  git status
  733  git add .
  734  git commit -m "CM5"
  735  clear
  736  git ls-files
  737  ls
  738  git log --oneline
  739  git reset --hard 31300a8
  740  git ls-files
  741  ls
  742  ls -a
  743  git status
  744  git log --oneline
  745  clear
  746  echo "rec1" >> file5.txt
  747  git add .
  748  git commit -m "CM5"
  749  clear
  750  git log --oneline
  751  git revert 9507410
  752  git log --oneline
  753  ls
  754  git ls-files
  755  clear
  756  git log --oneline
  757  clear
  758  cd ..
  759  mkdir project5
  760  cd project5
  761  git init
  762  clear
  763  echo "rec1" >> file1.txt
  764  echo "rec1" >> file1.txt
  765  echo "rec1" >> file1.txt
  766  echo "rec1" >> file1.txt
  767  echo "rec1" >> file1.txt
  768  cat file1.txt
  769  git add .
  770  git commit -m "ADFASDF"
  771  clear
  772  git log --oneline
  773  git log
  774  git log --oneline
  775  git commit -m "CM1"
  776  git commit --amend -m "CM1"
  777  git log --oneline
  778  clear
  779  git log --oneline
  780  git show 5a932bc
  781  echo "rec6" >> file1.txt
  782  git add .
  783  git commit -m "CM2"
  784  git log --oneline
  785  git log --stat
  786  git log --oneline
  787  git show e100bbf
  788  vi file1.txt
  789  git add .
  790  git commit -m "CM3"
  791  git log --oneline
  792  git show a08a613
  793  git log --stat
  794  history

#Branching::::

  362  mkdir demoproj2
  363  clear
  364  cd demoproj2
  365  git init
  366  echo "rec1" >> file1.txt
  367  git add .
  368  git commit -m "CM1 from master"
  369  echo "rec1" >> file2.txt
  370  git add .
  371  git commit -m "CM2 from master"
  372  clear
  373  git log --oneline
  374  git branch
  375  git branch f1
  376  git branch
  377  git switch -c f2
  378  git switch master
  379  git checkout -b f3
  380  git swithc master
  381  git switch master
  382  git checkout f4
  383  git branch
  384  git switch f4
  385  git branch f4
  386  clear
  387  clear
  388  git status
  389  git branch
  390  git switch f1
  391  git branch
  392  clear
  393  git switch master
  394  clear
  395  ls
  396  git log --oneline
  397  git switch f1
  398  git log --oneline
  399  ls
  400  git status
  401  cat file1.txt
  402  cat file2.txt
  403  echo "rec1" >> file3.txt
  404  git status
  405  git add .
  406  git commit -m "CM1 from f1"
  407  git status
  408  git log --oneline
  409  ls
  410  echo "rec1" >> file4.txt
  411  git add .
  412  git commit -m "CM2 from f1"
  413  git log --oneline
  414  ls
  415  git switch master
  416  git log --oneline
  417  ls
  418  git switch f3
  419  ls
  420  git switch master
  421  git branch
  422  git merge f1
  423  git log --oneline
  424  ls
  425  git log --oneline
  426  clear
  427  clear
  428  ls
  429  git branch
  430  git status
  431  git log --oneline
  432  cd ..
  433  mkdir demoproj3
  434  clear
  435  cd demoproj3
  436  ls
  437  git init
  438  clear
  439  echo "rec1" >> file1.txt
  440  git add .
  441  git commit -m "CM1 from master"
  442  clear
  443  echo "rec2" >> file1.txt
  444  git add .
  445  git commit -m "CM2 from master"
  446  clear
  447  git switch -c feature1
  448  git switch master
  449  git switch -c feature2
  450  git switch master
  451  git log --oneline
  452  clear
  453  git log --oneline
  454  git switch feature1
  455  ls
  456  vi file1.txt
  457  git status
  458  git add .
  459  git commit -m "CM1 from feature1"
  460  git log --oneline
  461  git switch master
  462  git merge feature
  463  cat file1.txt
  464  git switch feature2
  465  ls
  466  cat file1.txt
  467  vi file1.txt
  468  git add .
  469  git commit -m "CM1 from feature2"
  470  cat file1.txt
  471  git switch master
  472  git merge feature2
  473  cat file1.txt
  474  vi file1.txt
  475  git add .
  476  git commit -m "resolved Merge Conflict"
  477  cd ..
  478  mkdir demoproj4
  479  cd demoproj4
  480  git clone https://github.com/LoksaiETA/Java-mvn-app2.git
  481  ls
  482  cd Java-mvn-app2/
  483  ls
  484  echo "ngfdhgfhgf" > s2.txt
  485  git add .
  486  git commit -m " cm1 frm local"
  487  git fetch
  488  git remote -v
  489  git push
  490  clear
  491  cd..
  492  cd ..
  493  ls
  494  clear
  495  ls
  496  git clone https://github.com/LoksaiETA/TestRepo1.git
  497  ls
  498  cd TestRepo1/
  499  ls
  500  exit
  501  cd d:
  502  cd staragile/
  503  mkdir gitdemo1
  504  cd gitdemo1/
  505  ls
  506  clear
  507  git init
  508  echo "rec1" >> f1.txt
  509  git add .
  510  git commit -m "CM1 from master"
  511  clear
  512  echo "rec1" >> f2.txt
  513  git add .
  514  git commit -m "CM2 from master"
  515  git log --oneline
  516  clear
  517  git switch -c feature1
  518  git switch master
  519  git switch -c feature2
  520  git branch
  521  clear
  522  git log --oneline
  523  ls
  524  echo "Rec1" >> f3.txt
  525  git add .
  526  git commit -m "CM1 from feature2"
  527  clear
  528  git log --oneline
  529  git switch master
  530  git merge feature2
  531  git log --oneline
  532  clear
  533  git switch feature1
  534  clear
  535  ls
  536  echo "rec1" >> s1.txt
  537  git add .
  538  git commit -m "CM1 from feature1"
  539  clear
  540  git status
  541  git log --oneline
  542  git switch master
  543  git log --oneline
  544  git switch feature2
  545  git switch feature1
  546  git log --oneline
  547  git switch master
  548  git log --oneline
  549  clear
  550  git log --oneline
  551  git switch feature1
  552  git log --oneline
  553  git rebase master
  554  git log --oneline
  555  git switch master
  556  git merge feature1
  557  git log --oneline
  558  clear
  559  git switch feature1
  560  clear
  561  git log --oneline
  562  echo "rec1" >> q1.txt
  563  git add .
  564  git commit -m "CM2.1 from feature1"
  565  echo "rec" >> q1.txt
  566  git add .
  567  git commit -m "CM2.2 from feature1"
  568  echo "rec" >> q1.txt
  569  git add .
  570  git commit -m "CM2.3 from feature1"
  571  echo "rec" >> q1.txt
  572  git add .
  573  git commit -m "CM2.4 from feature1"
  574  echo "rec" >> q1.txt
  575  git add .
  576  git commit -m "CM2.5 from feature1"
  577  echo "rec" >> q1.txt
  578  git add .
  579  git commit -m "CM2.6 from feature1"
  580  cat q1.txt
  581  git log --oneline
  582  clear
  583  git log --oneline
  584  git switch master
  585  git merge --squash feature1
  586  git log --oneline
  587  ls
  588  cat q1.txt
  589  clear
  590  git switch feature2
  591  git switch master
  592  git commit -m "Combined commits from feature1"
  593  git status
  594  git log --oneline
  595  ls
  596  git switch feature1
  597  git log --oneline
  598  git switch master
  599  cat q1.txt
  600  clear
  601  git switch feature2
  602  git log --oneline
  603  ehco "rec" >> w1.txt
  604  echo "rec" >> w1.txt
  605  git add .
  606  git commit -m "CM2.1 from feature2"
  607  clear
  608  echo "rec" >> w1.txt
  609  git add .
  610  git commit -m "CM2.2 from feature2"
  611  echo "rec" >> w1.txt
  612  git add .
  613  git commit -m "CM2.3 from feature2"
  614  echo "rec" >> w1.txt
  615  git add .
  616  git commit -m "CM2.4 from feature2"
  617  echo "rec" >> w1.txt
  618  git add .
  619  git commit -m "CM2.5 from feature2"
  620  clear
  621  git log --oneline
  622  git rebase -i HEAD~5
  623  git log --oneline
  624  ls
  625  cat w1.txt
  626  echo "rec1" > r1.txt
  627  echo "rec2" > r1.txt
  628  echo "rec3" > r1.txt
  629  echo "rec4" > r1.txt
  630  git add .
  631  git commit -m " Added r1.txt"
  632  clear
  633  git log oneline
  634  git log --oneline
  635  git switch master
  636  git log --oneline
  637  git switch feature2
  638  git rebase master
  639  git log --oneline
  640  git switch master
  641  ls
  642  git cherry-pick 4f33fd5
  643  git log --oneline
  644  ls
  645  clear
  646  git log --oneline
  647  git switch -c feature-cr1
  648  echo "rec1" >> l1.txt
  649  git add .
  650  clear
  651  git status
  652  git branch
  653  git switch feature2
  654  git status
  655  git switch feature-cr1
  656  git status
  657  git stash
  658  git status
  659  git stash list
  660  git log --oneline
  661  echo "rec1" >> l2.txt
  662  git add .
  663  git status
  664  git stash save "stashed l2.txt"
  665  git stash list
  666  git status
  667  git stash show
  668  git stash show stash@{1}
  669  git status
  670  echo "rec1" >> l3.txt
  671  git add .
  672  git stash save "stashed l3.txt"
  673  echo "rec1" >> l4.txt
  674  git add .
  675  git stash save "stashed l4.txt"
  676  git stash list
  677  git status
  678  git stash apply
  679  git stash list
  680  git commit -m "l4.txt"
  681  git status
  682  git stash list
  683  git stash drop
  684  git stash list
  685  git stash pop
  686  git status
  687  c;lear
  688  clear
  689  git status
  690  git stash branch cr1-temp-brnch
  691  clera
  692  clear
  693  git branch
  694  git status
  695  cd ..
  696  mkdir gitremotedemo1
  697  cd gitremotedemo1/
  698  clear
  699  git init
  700  echo "rec1" >> Readme.txt
  701  echo "rec1" >> Readme.txt
  702  echo "rec1" >> Readme.txt
  703  echo "rec1" >> Readme.txt
  704  git add .
  705  git commit -m "Initial Commit from Local Repo"
  706  ckear
  707  clear
  708  ls
  709  cat Readme.txt
  710  git remote -v
  711  git remote add origin https://github.com/LoksaiETA/dummyremoterepo1.git
  712  git remote -v
  713  git push -u origin master
  714  git remote -v
  715  git remote add origin1 https://github.com/LoksaiETA/dummyremoterepo2.git
  716  git remote -v
  717  git branch
  718  git branch -M main
  719  git branch -M master
  720  git push -u origin1 master
  721  git remote -v
  722  git remote remove origin1
  723  git remote -v
  724  git remote add origin1 https://github.com/LoksaiETA/dummyremoterepo2.git
  725  git remote -v
  726  clear
  727  ls
  728  echo "rec1" >> file1.txt
  729  git add .
  730  git commit -m "CM1 from local master"
  731  git status
  732  git log --oneline
  733  clear
  734  git remote -v
  735  git push -u origin1
  736  git switch -c feature1
  737  ls
  738  echo "rec1" >> file2.txt
  739  git add .
  740  git commit -m "CM1 from local feature1"
  741  git log --oneline
  742  git push -u origin1 feature1
  743  git switch master
  744  git status
  745  git log --oneline
  746  ls
  747  git fetch origin1
  748  git fetch origin1
  749  ls
  750  git pull origin1
  751  ls
  752  cd.
  753  cd..
  754  cd ..
  755  mkdir gitremotedemo2
  756  cd gitremotedemo2/
  757  git status
  758  git remote -v
  759  git clone https://github.com/LoksaiETA/dummyremoterepo5.git
  760  ls
  761  cd de
  762  cd dummyremoterepo5/
  763  ls
  764  git status
  765  git remote -v
  766  git fetch
  767  git fetch
  768  git pull
  769  ls
  770  git pull
  771  history